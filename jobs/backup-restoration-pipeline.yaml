- job:
    name: auto-pipeline-backup-restoration
    project-type: pipeline
    description: "This pipeline performs a test restoration of a backup"
    parameters:
      - string:
          name: backupIp
          description: "The IP address of the backup server"
      - string:
          name: backupFile
          description: "The backup file (including path)"
      - string:
          name: dataType
          description: "The data type of the backup e.g. json or mysql"
      - string:
          name: decryptKey
          description: "The GPG key to decryt the backup"
    dsl: |
      node {

        stage ('Deploy Restoration Server') {
          build job: 'auto-pipeline-deploy-restoration-server', parameters: [
            string(name: 'instanceName', value: "$BUILD_TAG"),
            string(name: 'dataType', value: "${dataType}"),
          ]
        }

        def restorationServerIp  
        stage('Retrieve Restoration Server IP') {        

          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'KEY_ID', credentialsId: 'aws-jenkins', secretKeyVariable: 'SECRET_KEY']]) {

            restorationServerIp = sh (
              script: '''AWS_ACCESS_KEY_ID=$KEY_ID AWS_SECRET_ACCESS_KEY=$SECRET_KEY aws ec2 --region eu-west-1 describe-instances --filters "Name=tag-value,Values="$BUILD_TAG | grep PublicIpAddress | awk -F'"' '{print $4}' ''',
              returnStdout:true
            ).trim()
          }
        }

        println "Restoration Server IP: ${restorationServerIp}"

        stage('Decrypt Backup') {
          build job: 'auto-pipeline-backup-decrypt', parameters: [
            string(name: 'backupIp', value: "${backupIp}"),
            string(name: 'backupFile', value: "${backupFile}"),
            string(name: 'decryptKey', value: "${decryptKey}"),
            string(name: 'restorationServerIp', value: "${restorationServerIp}")
          ]
        }

        stage('Restore Backup') {
        // Run the correct restore and read according to the data type!
          switch(dataType) {
            case 'json':
              build job: 'auto-pipeline-backup-restore-json', parameters: [
                string(name: 'restorationServerIp', value: "${restorationServerIp}")
              ]
              break;
            case 'mysql':
              println("MySQL not implemented yet... here for demo purposes only")
              break;
          }
        }

        stage('Destroy Restoration Server') {
          build job: 'auto-pipeline-destroy-restoration-server', parameters: [
            string(name: 'instanceName', value: "${BUILD_TAG}")
          ]
        }

      }